// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cactusTree
NumericMatrix cactusTree(IntegerVector parent, IntegerVector order, NumericVector weight, double scale, double overlap, bool upright);
RcppExport SEXP _ggraph_cactusTree(SEXP parentSEXP, SEXP orderSEXP, SEXP weightSEXP, SEXP scaleSEXP, SEXP overlapSEXP, SEXP uprightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< bool >::type upright(uprightSEXP);
    rcpp_result_gen = Rcpp::wrap(cactusTree(parent, order, weight, scale, overlap, upright));
    return rcpp_result_gen;
END_RCPP
}
// pack
NumericMatrix pack(NumericVector areas);
RcppExport SEXP _ggraph_pack(SEXP areasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type areas(areasSEXP);
    rcpp_result_gen = Rcpp::wrap(pack(areas));
    return rcpp_result_gen;
END_RCPP
}
// circlePackLayout
NumericMatrix circlePackLayout(IntegerVector parent, NumericVector weight);
RcppExport SEXP _ggraph_circlePackLayout(SEXP parentSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(circlePackLayout(parent, weight));
    return rcpp_result_gen;
END_RCPP
}
// dendrogram_spread
NumericVector dendrogram_spread(ListOf<IntegerVector> graph, IntegerVector starts, NumericVector y, LogicalVector leaf, bool repel, double pad, double ratio);
RcppExport SEXP _ggraph_dendrogram_spread(SEXP graphSEXP, SEXP startsSEXP, SEXP ySEXP, SEXP leafSEXP, SEXP repelSEXP, SEXP padSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<IntegerVector> >::type graph(graphSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type leaf(leafSEXP);
    Rcpp::traits::input_parameter< bool >::type repel(repelSEXP);
    Rcpp::traits::input_parameter< double >::type pad(padSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(dendrogram_spread(graph, starts, y, leaf, repel, pad, ratio));
    return rcpp_result_gen;
END_RCPP
}
// force_bundle_iter
List force_bundle_iter(NumericMatrix edges_xy, List elist, double K, int C, int P, int P_rate, double S, int I, double I_rate, double compatibility_threshold, double eps);
RcppExport SEXP _ggraph_force_bundle_iter(SEXP edges_xySEXP, SEXP elistSEXP, SEXP KSEXP, SEXP CSEXP, SEXP PSEXP, SEXP P_rateSEXP, SEXP SSEXP, SEXP ISEXP, SEXP I_rateSEXP, SEXP compatibility_thresholdSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type edges_xy(edges_xySEXP);
    Rcpp::traits::input_parameter< List >::type elist(elistSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_rate(P_rateSEXP);
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type I_rate(I_rateSEXP);
    Rcpp::traits::input_parameter< double >::type compatibility_threshold(compatibility_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(force_bundle_iter(edges_xy, elist, K, C, P, P_rate, S, I, I_rate, compatibility_threshold, eps));
    return rcpp_result_gen;
END_RCPP
}
// hTree
NumericMatrix hTree(IntegerVector parent, IntegerVector order);
RcppExport SEXP _ggraph_hTree(SEXP parentSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(hTree(parent, order));
    return rcpp_result_gen;
END_RCPP
}
// partitionTree
NumericMatrix partitionTree(IntegerVector parent, IntegerVector order, NumericVector weight, NumericVector height);
RcppExport SEXP _ggraph_partitionTree(SEXP parentSEXP, SEXP orderSEXP, SEXP weightSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(partitionTree(parent, order, weight, height));
    return rcpp_result_gen;
END_RCPP
}
// cut_lines
List cut_lines(NumericVector x, NumericVector y, IntegerVector id, NumericVector start_width, NumericVector start_height, NumericVector end_width, NumericVector end_height, CharacterVector start_type, CharacterVector end_type);
RcppExport SEXP _ggraph_cut_lines(SEXP xSEXP, SEXP ySEXP, SEXP idSEXP, SEXP start_widthSEXP, SEXP start_heightSEXP, SEXP end_widthSEXP, SEXP end_heightSEXP, SEXP start_typeSEXP, SEXP end_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type start_width(start_widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type start_height(start_heightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type end_width(end_widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type end_height(end_heightSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type start_type(start_typeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type end_type(end_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cut_lines(x, y, id, start_width, start_height, end_width, end_height, start_type, end_type));
    return rcpp_result_gen;
END_RCPP
}
// pathAttr
DataFrame pathAttr(DataFrame paths, int ngroups);
RcppExport SEXP _ggraph_pathAttr(SEXP pathsSEXP, SEXP ngroupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type paths(pathsSEXP);
    Rcpp::traits::input_parameter< int >::type ngroups(ngroupsSEXP);
    rcpp_result_gen = Rcpp::wrap(pathAttr(paths, ngroups));
    return rcpp_result_gen;
END_RCPP
}
// splitTreemap
NumericMatrix splitTreemap(IntegerVector parent, IntegerVector order, NumericVector weight, double width, double height);
RcppExport SEXP _ggraph_splitTreemap(SEXP parentSEXP, SEXP orderSEXP, SEXP weightSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(splitTreemap(parent, order, weight, width, height));
    return rcpp_result_gen;
END_RCPP
}
// unrooted
NumericMatrix unrooted(IntegerVector parent, IntegerVector order, NumericVector length, bool daylight, double tol, double rotation_mod, int maxiter);
RcppExport SEXP _ggraph_unrooted(SEXP parentSEXP, SEXP orderSEXP, SEXP lengthSEXP, SEXP daylightSEXP, SEXP tolSEXP, SEXP rotation_modSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type daylight(daylightSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type rotation_mod(rotation_modSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(unrooted(parent, order, length, daylight, tol, rotation_mod, maxiter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggraph_cactusTree", (DL_FUNC) &_ggraph_cactusTree, 6},
    {"_ggraph_pack", (DL_FUNC) &_ggraph_pack, 1},
    {"_ggraph_circlePackLayout", (DL_FUNC) &_ggraph_circlePackLayout, 2},
    {"_ggraph_dendrogram_spread", (DL_FUNC) &_ggraph_dendrogram_spread, 7},
    {"_ggraph_force_bundle_iter", (DL_FUNC) &_ggraph_force_bundle_iter, 11},
    {"_ggraph_hTree", (DL_FUNC) &_ggraph_hTree, 2},
    {"_ggraph_partitionTree", (DL_FUNC) &_ggraph_partitionTree, 4},
    {"_ggraph_cut_lines", (DL_FUNC) &_ggraph_cut_lines, 9},
    {"_ggraph_pathAttr", (DL_FUNC) &_ggraph_pathAttr, 2},
    {"_ggraph_splitTreemap", (DL_FUNC) &_ggraph_splitTreemap, 5},
    {"_ggraph_unrooted", (DL_FUNC) &_ggraph_unrooted, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggraph(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
